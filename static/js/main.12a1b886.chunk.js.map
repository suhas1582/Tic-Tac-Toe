{"version":3,"sources":["components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","name","color","className","onClick","clicked","style","size","Array","fill","App","useState","isCross","setIsCross","turn","setTurn","winMessage","setWinMessage","arr","setArr","callToast","message","type","toast","error","position","POSITION","TOP_RIGHT","success","useEffect","checkWin","textAlign","Container","fluid","map","ele","index","i","ButtonClickedHandler","key","alignItems","height","justifyContent","marginTop","padding","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.12a1b886.chunk.js","sourcesContent":["import React from \"react\";\nimport {FaTimes, FaRegCircle, FaPen} from \"react-icons/fa\";\nimport \"../App.css\";\n\nconst Board = (props) => {\n    switch(props.name) {\n        case \"cross\":\n            if(props.color) {\n                return (\n                    <FaTimes className=\"Tile Shape\" onClick={props.clicked} style={{color: \"abcd14\"}}/>\n                );\n            }\n            else {\n                return (\n                    <FaTimes className=\"Tile Shape\" onClick={props.clicked}/>\n                );\n            }\n        case \"circle\":\n            if(props.color) {\n                return (\n                    <FaRegCircle className=\"Tile Shape\" onClick={props.clicked} style={{color: \"abcd14\"}}/>\n                );\n            }\n            else {\n                return (\n                    <FaRegCircle className=\"Tile Shape\" onClick={props.clicked}/>\n                );\n            }\n        default:\n            return <FaPen className=\"Tile\" onClick={props.clicked}/>\n    }\n}\n\nexport default Board;","import React, { Fragment, useState, useEffect } from \"react\";\nimport Board from \"./components/Board\";\nimport { Container, Button } from \"reactstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst size = new Array(9).fill(\"empty\");\n\nconst App = () => {\n  // Creating and initializing states\n  const [isCross, setIsCross] = useState(false);\n  const [turn, setTurn] = useState(\"Circle\");\n  const [winMessage, setWinMessage] = useState(\"\");\n  const [arr, setArr] = useState([]);\n\n  // Methods for various events\n\n  const callToast = (message, type) => {\n    if (type === \"error\") {\n      toast.error(message, { position: toast.POSITION.TOP_RIGHT });\n    } else {\n      toast.success(message, { position: toast.POSITION.TOP_RIGHT });\n    }\n  };\n\n  const ButtonClickedHandler = (i) => {\n    // console.log(\"Inside bch\");\n    if (!winMessage) {\n      if (size[i] === \"empty\") {\n        size[i] = isCross ? \"cross\" : \"circle\";\n        setIsCross(!isCross);\n        let newTurn = turn === \"Circle\" ? \"Cross\" : \"Circle\";\n        setTurn(newTurn);\n      } else {\n        callToast(\"Already Selected\", \"error\");\n      }\n    } else {\n      callToast(winMessage, \"success\");\n    }\n    checkWin();\n  };\n\n  useEffect(()=>{\n    if(winMessage) {\n      callToast(winMessage, \"success\");\n    }\n  }, [winMessage]);\n\n  const checkWin = () => {\n    if (size[0] !== \"empty\" && size[0] === size[1] && size[1] === size[2]) {\n      setWinMessage(`${size[0]} won`);\n      setArr([0,1,2]);\n      //callToast(winMessage, \"success\");\n    }\n    else if (size[3] !== \"empty\" && size[3] === size[4] && size[4] === size[5]) {\n      setWinMessage(`${size[3]} won`);\n      setArr([3,4,5]);\n      //callToast(winMessage, \"success\");\n    }\n    else if (size[6] !== \"empty\" && size[6] === size[7] && size[7] === size[8]) {\n      setWinMessage(`${size[6]} won`);\n      setArr([6,7,8]);\n      // callToast(winMessage, \"success\");\n    }\n    else if (size[0] !== \"empty\" && size[0] === size[3] && size[3] === size[6]) {\n      setWinMessage(`${size[0]} won`);\n      setArr([0,3,6]);\n      // callToast(winMessage, \"success\");\n    }\n    else if (size[1] !== \"empty\" && size[1] === size[4] && size[4] === size[7]) {\n      setWinMessage(`${size[1]} won`);\n      setArr([1,4,7]);\n      // callToast(winMessage, \"success\");\n    }\n    else if (size[2] !== \"empty\" && size[2] === size[5] && size[5] === size[8]) {\n      setWinMessage(`${size[2]} won`);\n      setArr([2,5,8]);\n      // callToast(winMessage, \"success\");\n    }\n    else if (size[0] !== \"empty\" && size[0] === size[4] && size[4] === size[8]) {\n      setWinMessage(`${size[0]} won`);\n      setArr([0,4,8]);\n      // callToast(winMessage, \"success\");\n    }\n    else if (size[2] !== \"empty\" && size[2] === size[4] && size[4] === size[6]) {\n      setWinMessage(`${size[2]} won`);\n      setArr([2,4,6]);\n      // callToast(winMessage, \"success\");\n    }\n    \n  };\n\n  const resetGame = () => {\n    size.fill(\"empty\");\n    setIsCross(false);\n    setTurn(\"Circle\");\n    setWinMessage(\"\");\n    setArr([]);\n  };\n\n  // Style\n  const style = {\n    color: \"white\",\n    textAlign: \"center\",\n  };\n\n  // Main return\n  return (\n    <Fragment>\n      <h1 style={style}>React Tic-Tac-Toe try</h1>\n      {\n        winMessage ? <h2 style={style}>{winMessage}</h2> : <h2 style={style}>{turn}'s Turn</h2> \n      }\n      \n      <Container fluid className={\"mt-5\"}>\n        <div className=\"Board divBoard\">\n          {\n            size.map((ele, index) => {\n              return <Board\n                name={ele}\n                clicked={() => ButtonClickedHandler(index)}\n                key={index}\n                color={(index===arr[0]) || index === arr[1] || index === arr[2]}\n              />\n              \n          })\n          }\n        </div>\n      </Container>\n      <div\n        style={{\n          alignItems: \"center\",\n          height: \"auto\",\n          justifyContent: \"center\",\n          marginTop: \"50px\",\n          textAlign: \"center\",\n          padding: \"0 200px\",\n        }}\n      >\n        <Button className=\"btn-danger btl-lg btn-block\" onClick={resetGame}>\n          Reset Game\n        </Button>\n      </div>\n      <ToastContainer />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}